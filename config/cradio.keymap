// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 2500  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define MAC 0
#define WIN 1
#define RIG 2
#define LEF 3
#define TRI 4
#define MOUSE 5
#define U_MS_U &mmv MOVE_UP
#define U_MS_D &mmv MOVE_DOWN
#define U_MS_L &mmv MOVE_LEFT
#define U_MS_R &mmv MOVE_RIGHT
#define U_WH_U &msc SCRL_UP
#define U_WH_D &msc SCRL_DOWN
#define U_WH_L &msc SCRL_LEFT
#define U_WH_R &msc SCRL_RIGHT

/ {
    chosen { zmk,charmap = &charmap_us; };

    behaviors {
        ht: hold_tap {
            label = "hold_tap";
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };

        mmv {
            acceleration-exponent = <1>;      // 1
            time-to-max-speed-ms = <300>;    // 40
            delay-ms = <0>;                   // 0
        };

        msc {
            acceleration-exponent = <0>;      // 0
            time-to-max-speed-ms = <40>;      // 500
            delay-ms = <0>;                   // 10
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <5 3>;
            then-layer = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        setting {
            bindings = <&lt 6 SPACE>;
            key-positions = <30 31>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <7 8>;
            layers = <0>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            layers = <0>;
        };

        space {
            bindings = <&kp SPACE>;
            key-positions = <22 21>;
            layers = <0>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W       &kp E        &kp R       &kp T         &kp Y      &kp U       &kp I        &kp O       &kp P
&kp A  &ht LALT S  &ht LCTRL D  &ht LGUI F  &kp G         &kp H      &ht RGUI J  &ht RCTRL K  &ht RALT L  &kp BSPC
&kp Z  &kp X       &kp C        &kp V       &kp B         &kp N      &kp M       &kp COMMA    &kp DOT     &kp ENTER
                                &lt 3 TAB   &kp LSHIFT    &kp SPACE  &lt 5 TAB
            >;
        };

        windows_layer {
            bindings = <
&kp Q  &kp W       &kp E       &kp R        &kp T         &kp Y      &kp U        &kp I       &kp O       &kp P
&kp A  &ht LALT S  &ht LGUI D  &ht LCTRL F  &kp G         &kp H      &ht RCTRL J  &ht RGUI K  &ht RALT L  &kp BSPC
&kp Z  &kp X       &kp C       &kp V        &kp B         &kp N      &kp M        &kp COMMA   &kp DOT     &kp ENTER
                               &lt 3 TAB    &kp LSHIFT    &kp SPACE  &lt 5 TAB
            >;
        };

        tri_layer {
            bindings = <
&kp F1  &kp F2   &kp F3   &kp F4   &bt BT_SEL 0    &bt BT_SEL 2  &out OUT_TOG   &tog 1  &kp C_MUTE    &kp C_PREV
&kp F5  &kp F6   &kp F7   &kp F8   &bt BT_SEL 1    &bt BT_SEL 3  &kp C_BRI_UP   &trans  &kp C_VOL_UP  &kp C_PP
&kp F9  &kp F10  &kp F11  &kp F12  &bt BT_CLR      &bt BT_SEL 4  &kp C_BRI_DEC  &trans  &kp C_VOL_DN  &kp C_NEXT
                          &trans   &trans          &trans        &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT          &kp CARET  &kp AMPS   &kp ASTRK  &kp GRAVE  &kp TILDE
&kp DQT   &kp LBKT  &kp LBRC  &kp LPAR  &default_report    &kp FSLH   &kp MINUS  &kp EQUAL  &kp COLON  &kp SEMI
&kp SQT   &kp RBKT  &kp RBRC  &kp RPAR  &bootloader        &kp BSLH   &kp UNDER  &kp PLUS   &kp PIPE   &kp QMARK
                              &trans    &trans             &tog 6     &trans
            >;
        };

        num_arrow_layer {
            bindings = <
&kp INSERT      &kp HOME        &kp UP    &kp END    &kp PG_UP          &kp SLASH     &kp N7        &kp N8        &kp N9        &kp MINUS
&kp DEL         &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &kp PG_DN          &kp NUMBER_0  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS
&kp LEFT_SHIFT  &trans          &trans    &trans     &kp PRINTSCREEN    &kp PERIOD    &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL
                                          &trans     &kp ESC            &kp ENTER     &trans
            >;
        };

        mouse {
            bindings = <
&tog 6  &mkp MB4   &msc SCRL_UP    &mkp MB5          &trans        &trans     &mkp LCLK       &mmv MOVE_UP    &mkp RCLK        &tog 6
&trans  &mkp RCLK  &msc SCRL_DOWN  &mkp LCLK         &trans        &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans
&trans  &trans     &mkp MCLK       &trans            &trans        &trans     &trans          &trans          &trans           &trans
                                   &kp LEFT_CONTROL  &kp LSHIFT    &mkp LCLK  &mkp RCLK
            >;
        };

        settings {
            bindings = <
&bootloader  &trans  &kp C_BRI_UP  &trans  &bt BT_SEL 0    &bt BT_SEL 3  &trans  &kp C_VOL_UP  &trans  &bootloader
&trans       &trans  &kp C_BRI_DN  &trans  &bt BT_SEL 1    &bt BT_SEL 4  &trans  &kp C_VOL_DN  &trans  &trans
&trans       &trans  &trans        &trans  &bt BT_SEL 2    &bt BT_CLR    &trans  &kp K_MUTE    &trans  &trans
                                   &trans  &trans          &trans        &trans
            >;
        };
    };
};
